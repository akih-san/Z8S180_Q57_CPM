	page 0
	cpu z80
;
;	SuperMEZ80-CPM Trampoline at the zero page
;
;	Copyright (C) 2023 by Hanyazou
;
; Permission is hereby granted, free of charge, to any person
; obtaining a copy of this software and associated documentation
; files (the "Software"), to deal in the Software without
; restriction, including without limitation the rights to use,
; copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the
; Software is furnished to do so, subject to the following
; conditions:
;
; The above copyright notice and this permission notice shall be
; included in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

;
;	I/O ports
;
CONDAT		EQU	1	; console output port
MON_CLEANUP	EQU	170	; clean up monitor mode
MON_PREPARE	EQU	171	; prepare monitor mode
MON_ENTER	EQU	172	; clean up monitor mode

;
;	start of zero page
;
;	Note: The condition bits are not affected by OUT, NOP, JP and JR instructions
;
	ORG	0		; reset vector
CLEANUP_START:
TGTINV_GATE:
	OUT (MON_ENTER),A
	JR EXIT
RESTORE_SP:			; destination of the return instruction (RETI or RETN)
	LD SP,0000h		; restore original SP

       DB	8 - $ dup(0)
	ORG	0008H		; RST 08H interrupt vector
CLEANUP_IO_ADDR EQU $ + 1
	OUT (MON_PREPARE),A
	NOP
JUMP_INST:
	JP ENTRY_RST		; Restore return address by jump instruction
CLEANUP_END:

;
;	program entry
;
ENTRY_RST:
	LD	(SAVED_SP),SP
	LD	SP,INT_STACK
	PUSH	AF
	XOR	A

ENTRY:
	LD	(NMI_FLAG),A
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY

	LD	SP,(SAVED_SP)	; Load original SP
	POP	HL		; Save return address
	LD	(SAVED_PC),HL

	JR	TGTINV_GATE

EXIT:
	LD	A,(NMI_FLAG)	; Update the return instruction according to NMI_FLAG
	LD	HL,RET_INST_RST
	OR	A
	JR	Z,SET_RET_INST
	LD	HL,RET_INST_NMI
SET_RET_INST:
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	LD	(RET_INST),BC	; Update the return instruction

;	setup clean up code
	LD	HL,(CLEANUP_CODE_LOCATION)
	LD	A,L
	OR	A,H
	JR	Z,UPDATE_CLEANUP_CODE

	LD	DE,CLEANUP_START
	LD	B,CLEANUP_END - CLEANUP_START
COPY_CLEANUP_CODE:
	LD	A,(DE)
	LD	(HL),A
	INC	HL
	INC	DE
	DJNZ	COPY_CLEANUP_CODE

	LD	HL,(CLEANUP_CODE_LOCATION)
	LD	DE,RESTORE_SP
	ADD	HL,DE
	LD	(FAKE_RET_ADDR),HL
	JR	UPDATE_CLEANUP_CODE

;
;	NMI interrupt vector
;
	DB	0066H - $ dup(0)	; NOP
	ORG	0066H		; NMI interrupt vector
	OUT	(MON_PREPARE),A	; NMI trap
	NOP
	LD	(SAVED_SP),SP
	LD	SP,INT_STACK
	PUSH	AF
	LD	A,1
	JR	ENTRY

UPDATE_CLEANUP_CODE:
	LD	IX,(CLEANUP_CODE_LOCATION)
	LD	A,MON_CLEANUP
	LD	(IX+CLEANUP_IO_ADDR),A
	LD	HL,(SAVED_SP)	; Set the origial SP
	LD	(IX+RESTORE_SP+1),L
	LD	(IX+RESTORE_SP+2),H
	LD	A,(RET_INST_NORMAL)
	LD	(IX+JUMP_INST),A
	LD	SP,SAVED_IY
	POP	IY
	POP	IX
	POP	HL
	POP	DE
	POP	BC
	POP	AF
RET_INST:
	RETN			; return to RESTORE_SP because SP is pointing to FAKE_RET_ADDR

RET_INST_RST:
	RETI
RET_INST_NMI:
	RETN
RET_INST_NORMAL:
	RET

;
;	work area
;	the structure of this area must be identical to struct trampoline_work_s in monitor.c
SAVED_IY:
	DW	0
SAVED_IX:
	DW	0
SAVED_HL:
	DW	0
SAVED_DE:
	DW	0
SAVED_BC:
	DW	0
SAVED_AF:
	DW	0
INT_STACK:
FAKE_RET_ADDR:
	DW	RESTORE_SP
SAVED_PC:
	DW	0
SAVED_SP:
	DW	0
CLEANUP_CODE_LOCATION:
	DW	0
NMI_FLAG:
	DB	0
WORK_RFU:
	DB	0

	END
